{"version":3,"sources":["components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","search","setSearch","city","setCity","useEffect","a","url","fetch","response","json","data","main","fetchData","className","id","type","value","onChange","e","target","temp","temp_min","temp_max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNA8CeA,EA5CF,WACX,MAA4BC,mBAAS,UAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAaA,OAXAC,qBAAU,YACO,uCAAG,gCAAAC,EAAA,6DACVC,EADU,4DACiDN,EADjD,iEAEOO,MAAMD,GAFb,cAEVE,EAFU,gBAGGA,EAASC,OAHZ,OAGVC,EAHU,OAKhBP,EAAQO,EAAKC,MALG,2CAAH,qDAOfC,KACC,CAACZ,IAGF,qBAAKa,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,uBACEC,GAAG,QACHC,KAAK,OACLC,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAUiB,EAAEC,OAAOH,YAGxC,qBAAKH,UAAU,UAAf,SACIX,EAGA,sBAAKW,UAAU,OAAf,UACE,6BAAKb,IACL,+BAAKE,EAAKkB,KAAV,QACA,uCACQlB,EAAKmB,SADb,WAC+BnB,EAAKoB,eANtC,sDCtBGC,MANf,WACE,OACE,cAAC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7eb0279b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./css/style.css\";\r\nconst Home = () => {\r\n  const [search, setSearch] = useState(\"Mumbai\");\r\n  const [city, setCity] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=a47234c1fafe2497eb46ac2c21a38275`;\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      //console.log(data.main);\r\n      setCity(data.main);\r\n    };\r\n    fetchData();\r\n  }, [search]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"box\">\r\n        <div className=\"inputBox\">\r\n          <input\r\n            id=\"input\"\r\n            type=\"text\"\r\n            value={search}\r\n            onChange={(e) => setSearch(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"textBox\">\r\n          {!city ? (\r\n            <p>no city found</p>\r\n          ) : (\r\n            <div className=\"info\">\r\n              <h1>{search}</h1>\r\n              <h2>{city.temp} C</h2>\r\n              <h3>\r\n                Min: {city.temp_min} | Max: {city.temp_max}\r\n              </h3>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import Home from './components/Home'\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}